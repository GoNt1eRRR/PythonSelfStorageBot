import requests
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
import qrcode
from io import BytesIO
from aiogram.types import BufferedInputFile
from datetime import datetime

from app.keyboards import main_menu_keyboard, order_keyboard

order_router = Router()

BASE_URL = "https://rertgertgertg.pythonanywhere.com/api/"


class CourierOrder(StatesGroup):
    waiting_for_storage_choice = State()
    waiting_for_full_name = State()
    waiting_for_phone = State()
    waiting_for_user_address = State()


@order_router.message(F.text == '–ö—É—Ä—å–µ—Ä')
async def courier_order_start(message: Message, state: FSMContext):
    try:
        response = requests.get(f"{BASE_URL}storage")
        response.raise_for_status()
        storages = response.json()

        if not storages:
            await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤.")
            return

        buttons = []
        for storage in storages:
            callback_data = f"choose_storage:{storage['name']}"
            button_text = f"{storage['name']} ({storage['location']})"
            buttons.append([InlineKeyboardButton(text=button_text, callback_data=callback_data)])

        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º —É–¥–æ–±–µ–Ω:",
            reply_markup=keyboard
        )
        await state.set_state(CourierOrder.waiting_for_storage_choice)

    except requests.RequestException:
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–∫–ª–∞–¥–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É /support"
        )


@order_router.callback_query(lambda c: c.data and c.data.startswith("choose_storage"))
async def courier_order_storage_chosen(callback: CallbackQuery, state: FSMContext):
    _, storage_name = callback.data.split("choose_storage:")

    await state.update_data(chosen_storage=storage_name.strip())

    await callback.message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–µ –§–ò–û:"
    )
    await state.set_state(CourierOrder.waiting_for_full_name)
    await callback.answer()


@order_router.message(CourierOrder.waiting_for_full_name)
async def courier_order_get_full_name(message: Message, state: FSMContext):
    full_name = message.text.strip()
    await state.update_data(full_name=full_name)

    await message.answer("–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(CourierOrder.waiting_for_phone)


@order_router.message(CourierOrder.waiting_for_phone)
async def courier_order_get_phone(message: Message, state: FSMContext):
    phone = message.text.strip()
    await state.update_data(phone_number=phone)

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –ø—Ä–∏–µ—Ö–∞—Ç—å –∫—É—Ä—å–µ—Ä—É:")
    await state.set_state(CourierOrder.waiting_for_user_address)


@order_router.message(CourierOrder.waiting_for_user_address)
async def courier_order_get_user_address(message: Message, state: FSMContext):
    user_address = message.text.strip()
    await state.update_data(user_address=user_address)

    data = await state.get_data()
    telegram_id = message.from_user.id

    payload = {
        "customer": str(telegram_id),
        "storage": data["chosen_storage"],
        "address": data["user_address"],
        "phone_number": data["phone_number"],
        "full_name": data["full_name"],
    }

    try:
        response = requests.post(f"{BASE_URL}order/", json=payload)
        if response.status_code == 201:
            await message.answer(
                "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –ö—É—Ä—å–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
                "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–∂–º–∏—Ç–µ /help –∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É /support",
                reply_markup=main_menu_keyboard
            )
        else:
            await message.answer(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π /support"
            )
    except requests.RequestException:
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π /support"
        )

    await state.clear()


@order_router.message(F.text == '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
async def back(message: Message):
    await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!', reply_markup=main_menu_keyboard)


@order_router.message(F.text == '–ó–∞–∫–∞–∑–∞—Ç—å —è—á–µ–π–∫—É')
async def order(message: Message):
    await message.answer(
        (
            "üì¶ <b>–ö–∞–∫ –±—ã –≤–∞–º –±—ã–ª–æ —É–¥–æ–±–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä—É–∑?</b>\n\n"
            "–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –¥–æ—Å—Ç–∞–≤–∫—É –≤–∞—à–∏—Ö –≤–µ—â–µ–π –¥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–∫–ª–∞–¥–∞! üöõ\n"
            "–ù–∞—à –∫—É—Ä—å–µ—Ä –ø—Ä–∏–µ–¥–µ—Ç –∫ –≤–∞–º, –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –∏–∑–º–µ—Ä–∏—Ç —Ä–∞–∑–º–µ—Ä—ã –≥—Ä—É–∑–∞ –∏ –ø–æ–¥–±–µ—Ä—ë—Ç –∏–¥–µ–∞–ª—å–Ω—ã–π —Ç–∞—Ä–∏—Ñ.\n\n"
            "‚¨áÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–∏–∂–µ!"
        ),
        parse_mode='HTML',
        reply_markup=order_keyboard
    )


@order_router.message(F.text == '–°–∞–º–æ–≤—ã–≤–æ–∑')
async def pickup(message: Message):
    await message.answer('–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ª—é–±–æ–π —Å–∫–ª–∞–¥ –∏–∑ —Å–ø–∏—Å–∫–∞. –î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –º–µ—Å—Ç–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å \
–≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ /support')
    response = requests.get(f'{BASE_URL}storage')
    response.raise_for_status()
    storages = response.json()
    list_of_storages = ''
    for number, storage in enumerate(storages, start=1):
        list_of_storages += f'''{number}. {storage['name']}.
        –ê–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞ - {storage['location']}.
        –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ —è—á–µ–µ–∫ - {storage['max_capacity']}.\n\n'''
    await message.answer(text=list_of_storages)


@order_router.message(F.text == '–ö—É—Ä—å–µ—Ä')
async def courier(message: Message):
    await message.answer('')


@order_router.message(F.text == '–ó–∞–∫–∞–∑—ã')
async def my_orders(message: Message):
    telegram_id = message.from_user.id

    try:
        orders_response = requests.get(f"{BASE_URL}order/")
        orders_response.raise_for_status()
    except requests.RequestException:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    orders = orders_response.json()

    try:
        storage_response = requests.get(f"{BASE_URL}storage/")
        storage_response.raise_for_status()
    except requests.RequestException:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    storages = storage_response.json()
    storage_map = {
        s["name"]: s["location"] for s in storages
    }

    user_orders = [
        order for order in orders
        if order["customer"] == str(telegram_id) and order["qr_issued"] is False
    ]

    if not user_orders:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –≤—ã–¥–∞—á–∏ QR-–∫–æ–¥–∞.")
        return

    for order in user_orders:
        order_id = order['id']
        storage_name = order['storage']
        user_address = order['address']
        phone_number = order['phone_number']
        full_name = order['full_name']
        status = order['status']
        end_date = order.get('end_date')

        if end_date:
            end_date_formatted = datetime.fromisoformat(end_date).strftime("%d.%m.%Y %H:%M")
        else:
            end_date_formatted = "–î–∞—Ç—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"

        storage_address = storage_map.get(storage_name, "–ê–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")

        text = (
            f"<b>–ó–∞–∫–∞–∑ ‚Ññ{order_id}</b>\n"
            f"–°–∫–ª–∞–¥: {storage_name}\n"
            f"–ê–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞: {storage_address}\n\n"
            f"–ê–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_address}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone_number}\n"
            f"–§–ò–û: {full_name}\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n"
            f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_date_formatted}\n"
        )

        inline_kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="–í—ã–¥–∞—Ç—å QR?",
                        callback_data=f"issue_qr:{order_id}"
                    )
                ]
            ]
        )

        await message.answer(text, parse_mode="HTML", reply_markup=inline_kb)


@order_router.callback_query(F.data.startswith("issue_qr"))
async def confirm_issue_qr(callback: CallbackQuery):
    _, order_id = callback.data.split(":")
    order_id = order_id.strip()

    confirm_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–î–∞", callback_data=f"confirm_qr:{order_id}"),
                InlineKeyboardButton(text="–ù–µ—Ç", callback_data="cancel_qr")
            ]
        ]
    )

    await callback.message.answer(
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–¥–∞—á—É QR-–∫–æ–¥–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id}:",
        reply_markup=confirm_keyboard
    )
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass


@order_router.callback_query(F.data.startswith("confirm_qr"))
async def issue_qr_code(callback: CallbackQuery):
    _, order_id = callback.data.split(":")
    order_id = order_id.strip()

    qr_data = f"SelfStorage Order #{order_id}"
    qr_img = qrcode.make(qr_data)

    bio = BytesIO()
    qr_img.save(bio, format='PNG')

    bio.seek(0)
    qr_bytes = bio.read()

    doc = BufferedInputFile(qr_bytes, filename="order_qr.png")

    patch_url = f"{BASE_URL}order/{order_id}/"
    files = {
        "qr_code": ("qr.png", BytesIO(qr_bytes), "image/png")
    }
    data = {"qr_issued": True}

    try:
        response = requests.patch(patch_url, data=data, files=files)
        if response.status_code not in (200, 202):
            await callback.message.answer(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑ ‚Ññ{order_id}. "
                f"–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {response.status_code}: {response.text}"
            )
            await callback.answer()
            return
    except requests.RequestException:
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        await callback.answer()
        return

    bio.seek(0)
    await callback.message.answer_document(
        document=doc,
        caption=f"QR-–∫–æ–¥ –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id}"
    )

    await callback.message.answer(
        "QR-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –±–∞–∑–µ! –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–∂–º–∏—Ç–µ /support"
    )
    await callback.answer()


@order_router.callback_query(F.data == "cancel_qr")
async def cancel_issue_qr(callback: CallbackQuery):
    await callback.message.answer("–í—ã–¥–∞—á–∞ QR-–∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await callback.answer()
